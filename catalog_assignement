import java.math.BigInteger;
import java.util.*;

public class Main {
    static class Point {
        int x;
        BigInteger y;
        
        Point(int x, BigInteger y) {
            this.x = x;
            this.y = y;
        }
    }

    private static BigInteger decode(String value, String base) {
        return new BigInteger(value, Integer.parseInt(base));
    }
    
    private static List<Point> getPointsFromJson(Map<String, Object> data) {
        List<Point> points = new ArrayList<>();
        Map<String, Object> keys = (Map<String, Object>) data.get("keys");
        int n = ((Number) keys.get("n")).intValue();
        
        for (int i = 1; i <= n; i++) {
            String key = String.valueOf(i);
            if (data.containsKey(key)) {
                Map<String, String> pointData = (Map<String, String>) data.get(key);
                int x = i;
                BigInteger y = decode(pointData.get("value"), pointData.get("base"));
                points.add(new Point(x, y));
            }
        }
        return points;
    }
    
    private static BigInteger lagrangeInterpolation(List<Point> allPoints, int k) {
        List<Point> points = allPoints.subList(0, k);
        BigInteger secret = BigInteger.ZERO;
        
        for (int i = 0; i < k; i++) {
            BigInteger term = points.get(i).y;
            BigInteger numerator = BigInteger.ONE;
            BigInteger denominator = BigInteger.ONE;
            
            for (int j = 0; j < k; j++) {
                if (i != j) {
                    BigInteger xiMinusXj = BigInteger.valueOf(points.get(i).x - points.get(j).x);
                    BigInteger negXj = BigInteger.valueOf(-points.get(j).x);
                    
                    numerator = numerator.multiply(negXj);
                    denominator = denominator.multiply(xiMinusXj);
                }
            }
            
            if (denominator.signum() < 0) {
                numerator = numerator.negate();
                denominator = denominator.negate();
            }
            
            term = term.multiply(numerator);
            
            if (!denominator.equals(BigInteger.ONE)) {
                term = term.divide(denominator);
            }
            
            secret = secret.add(term);
        }
        
        return secret.abs();
    }
    
    private static BigInteger solveTestCase(Map<String, Object> data) {
        Map<String, Object> keys = (Map<String, Object>) data.get("keys");
        int k = ((Number) keys.get("k")).intValue();
        List<Point> points = getPointsFromJson(data);
        return lagrangeInterpolation(points, k);
    }

    public static void main(String[] args) {
        // Test Case 1
        Map<String, Object> testCase1 = new HashMap<>();
        Map<String, Object> keys1 = new HashMap<>();
        keys1.put("n", 4);
        keys1.put("k", 3);
        testCase1.put("keys", keys1);
        
        Map<String, String> point1_1 = new HashMap<>();
        point1_1.put("base", "10");
        point1_1.put("value", "4");
        testCase1.put("1", point1_1);
        
        Map<String, String> point1_2 = new HashMap<>();
        point1_2.put("base", "2");
        point1_2.put("value", "111");
        testCase1.put("2", point1_2);
        
        Map<String, String> point1_3 = new HashMap<>();
        point1_3.put("base", "10");
        point1_3.put("value", "12");
        testCase1.put("3", point1_3);
        
        Map<String, String> point1_6 = new HashMap<>();
        point1_6.put("base", "4");
        point1_6.put("value", "213");
        testCase1.put("6", point1_6);
        
        // Test Case 2
        Map<String, Object> testCase2 = new HashMap<>();
        Map<String, Object> keys2 = new HashMap<>();
        keys2.put("n", 10);
        keys2.put("k", 7);
        testCase2.put("keys", keys2);
        
        Map<String, String> point2_1 = new HashMap<>();
        point2_1.put("base", "6");
        point2_1.put("value", "13444211440455345511");
        testCase2.put("1", point2_1);
        
        Map<String, String> point2_2 = new HashMap<>();
        point2_2.put("base", "15");
        point2_2.put("value", "aed7015a346d63");
        testCase2.put("2", point2_2);
        
        Map<String, String> point2_3 = new HashMap<>();
        point2_3.put("base", "15");
        point2_3.put("value", "6aeeb69631c227c");
        testCase2.put("3", point2_3);
        
        Map<String, String> point2_4 = new HashMap<>();
        point2_4.put("base", "16");
        point2_4.put("value", "e1b5e05623d881f");
        testCase2.put("4", point2_4);
        
        Map<String, String> point2_5 = new HashMap<>();
        point2_5.put("base", "8");
        point2_5.put("value", "316034514573652620673");
        testCase2.put("5", point2_5);
        
        Map<String, String> point2_6 = new HashMap<>();
        point2_6.put("base", "3");
        point2_6.put("value", "2122212201122002221120200210011020220200");
        testCase2.put("6", point2_6);
        
        Map<String, String> point2_7 = new HashMap<>();
        point2_7.put("base", "3");
        point2_7.put("value", "20120221122211000100210021102001201112121");
        testCase2.put("7", point2_7);
        
        Map<String, String> point2_8 = new HashMap<>();
        point2_8.put("base", "6");
        point2_8.put("value", "20220554335330240002224253");
        testCase2.put("8", point2_8);
        
        Map<String, String> point2_9 = new HashMap<>();
        point2_9.put("base", "12");
        point2_9.put("value", "45153788322a1255483");
        testCase2.put("9", point2_9);
        
        Map<String, String> point2_10 = new HashMap<>();
        point2_10.put("base", "7");
        point2_10.put("value", "1101613130313526312514143");
        testCase2.put("10", point2_10);
        
        // Solve and print results
        BigInteger secret1 = solveTestCase(testCase1);
        BigInteger secret2 = solveTestCase(testCase2);
        
        // Print only the required output
        System.out.println(secret1);
        System.out.println(secret2);
    }
}









/*
output:
3
79836264049851

*/
